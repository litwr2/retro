RESET_DS:       CMP     [DS_MODE],1             ;RESET DATASETTE
                JB      .L1

                MOV     BX,[DEV1FNP]
                CMP     BYTE [BX],0
                JE      .L2

                MOV     AX,4200H
                MOV     BX,[DEV1FH]
                MOV     DX,WORD [DS_SPOS]
                MOV     CX,WORD [DS_SPOS+2]
                INT     21H

                XOR     CX,CX           ;TRUNCATE
                MOV     AH,40H
                INT     21H

                MOV     AH,3EH
                INT     21H

                MOV     AX,3D02H
                MOV     DX,DEV1PATH
                INT     21H
.L2:            MOV     [DS_MODE],0
.L1:            OR      [CPU_1],8
                RETN

DS_SEEK:        MOV     [DS_NPOS],ECX
.L1:            DEC     DI
                JZ      .L2

                MOV     AH,3FH
                MOV     DX,DS_NPOS
                MOV     CX,4
                INT     21H

                MOV     AX,4200H
                MOV     DX,WORD [DS_NPOS]
                MOV     CX,WORD [DS_NPOS+2]
                INT     21H
                JMP     .L1

.L2:            RETN

CDS_IO_WR:      PUSH    EAX
                PUSH    EDX
                PUSH    CX
                PUSH    DI
                TEST    [CPU1_XOR],8    ;MOTOR LINE CHANGED?
                JZ      .L1

                TEST    [LED],10H
                JZ      .L1

                TEST    [CPU_1],8       ;MOTOR TURNED ON?
                JNZ     .L2

.L3:            MOV     BX,[DEV1FNP]
                CMP     BYTE [BX],0
                JNE     .L24

                PUSH    BP
                PUSH    SI
                CALL    INIT_MENUS
                MOV     DI,160*7+14*2
                MOV     CX,36
                MOV     BX,1
                MOV     SI,DS_MSG1
                MOV     [DS_MSG1+34],'1'
                CALL    OUT_MSG
                CALL    WAIT_ACTIVITY
                CALL    PLOT_SCR1
                CALL    MENU_DISP1
                CALL    END_MENUS
                POP     SI
                POP     BP
                JMP     .L3

.L24:           MOV     EAX,[DEV1SZ]                    ;SET VARIABLES
                MOV     [DS_SPOS],EAX                   ;FILESIZE

                MOV     BX,[DEV1FH]     ;READ CTF HEADER
                MOV     AX,4200H
                XOR     CX,CX
                XOR     DX,DX
                INT     21H

                MOV     AH,3FH
                MOV     DX,DS_FVER
                MOV     CX,6
                INT     21H

                MOV     DI,[DS_HPOSN]
                CALL    DS_SEEK
                MOV     EAX,[TOTALTICKS]
                MOV     [DS_TIMER],EAX
.L5:            POP     DI
.GL1:           POP     CX
                MOV     BX,1
                POP     EDX
                POP     EAX
.GL2:           RETN

.L2:            MOV     BX,[DEV1FH]
                CMP     [DS_MODE],1     ;CLOSE (+ TRUNCATE) A FILE
                JB      .L6

                JZ      .L18

                CALL    DSW_BIT
                CALL    DSW_FLUSH

                MOV     AX,WORD [DS_LBC]        ;TO DSW_FLUSH?
                OR      AH,AH
                JZ      .L10

.L11:           INC     AH
                SHL     AL,1
                CMP     AH,8
                JNZ     .L11

                MOV     [DS_LBC],AL
                MOV     AH,40H          ;WRITE LAST BYTE TO THE FILE
                MOV     BX,[DEV1FH]
                MOV     DX,DS_LBC
                MOV     CX,1
                INT     21H

.L10:           MOV     AX,4202H                ;GET FILESIZE
                XOR     DX,DX
                XOR     CX,CX
                MOV     BX,[DEV1FH]
                INT     21H

                MOV     WORD [DS_NPOS],AX       ;CONDITIONAL TRUNCATION ???
                MOV     WORD [DS_NPOS+2],DX
                MOV     AX,4200H                ;SEEK LAST EOF
                MOV     DX,WORD [DS_SPOS]
                MOV     CX,WORD [DS_SPOS+2]
                INT     21H

                MOV     EAX,[DS_NPOS]
                SUB     EAX,[DS_SPOS]
                CMP     EAX,7
                MOV     AH,40H
                JBE     .L7
                
                MOV     DX,DS_NPOS
                MOV     CX,5
                INT     21H
                
                INC     [DS_QENTR]
                MOV     EAX,[DS_NPOS]
                MOV     [DEV1SZ],EAX
                MOV     [DS_HPOSN],1

.L20:           MOV     AX,4200H
                XOR     CX,CX
                XOR     DX,DX
                INT     21H

                MOV     AH,40H
                MOV     DX,DS_FVER
                MOV     CX,6
                INT     21H

.L6:            MOV     [DS_MODE],0
                MOV     AH,3EH
                INT     21H
                MOV     DX,DEV1PATH     ;REOPEN
                MOV     AX,3D02H
                INT     21H
                MOV     [DEV1FH],AX
                JMP     .L5

.L7:            XOR     CX,CX
                INT     21H
                JMP     .L6

.L18:           MOV     AX,[DS_HPOSN]
                INC     AX
                CMP     AX,[DS_QENTR]
                JB      .L19

                CMP     BYTE [DS_MVAL],15H
                JA      .L27

                CMP     BYTE [DS_MVAL],12H
                JB      .L27

                ADD     [DS_RPOSBY],2
                MOV     EAX,[DS_RPOSE]
                SUB     EAX,[DS_RPOSBY]
                CMP     EAX,4096        ;min block?
                JB      .L27

                CMP     [DS_RPOSBY],4096        ;min block?
                JB      .L27

                INC     [DS_QENTR]
                MOV     EAX,[DS_NPOS]   ;find beginning of previous block
                MOV     [DS_RPOSP],EAX  ;save pos of next block
                SUB     EAX,[DS_RPOSE]
                SUB     EAX,5
                PUSH    EAX
                MOV     DX,AX
                SHR     EAX,16
                MOV     CX,AX
                MOV     AX,4200H
                INT     21H
                POP     EAX
                ADD     EAX,[DS_RPOSBY]
                MOV     [DS_NPOS],EAX
                PUSH    EAX
                MOV     AH,40H          ;write new NPOS (middle)
                MOV     CX,4
                MOV     DX,DS_NPOS
                INT     21H
                POP     EAX
                MOV     DX,AX
                SHR     EAX,16
                MOV     CX,AX
                MOV     AX,4200H
                INT     21H
                MOV     EAX,[DS_RPOSP]
                MOV     [DS_NPOS],EAX
                MOV     AH,40H          ;write new NPOS
                MOV     CX,5
                MOV     DX,DS_NPOS
                INT     21H

                INC     [DS_HPOSN]
                JMP     .L20

.L27:           MOV     AX,1
.L19:           MOV     [DS_HPOSN],AX
                JMP     .L20

.L1:            TEST    [CPU1_XOR],2    ;WRITE LINE CHANGED?
                JZ      .L5

                TEST    [CPU_1],8       ;MOTOR ON?
                JNZ     .L5

                CMP     [DS_MODE],1
                JZ      .L5

                JA      .L8

                MOV     [DS_MODE],2
                XOR     EAX,EAX
                MOV     [DS_SBUF],AL
                TEST    [CPU_1],2
                JNZ     .L9

                NOT     [DS_SBUF]
.L9:            MOV     [DS_MVAL],400H
                MOV     WORD [DS_LBC],AX
                MOV     [DS_BUF_PTR],AX
                MOV     [DS_MCOUNT],EAX
                MOV     [DS_MSUM],EAX

                MOV     AX,4202H        ;SEEK EOF & WRITE BLOCK HEADER
                XOR     DX,DX
                XOR     CX,CX
                MOV     BX,[DEV1FH]
                INT     21H

                MOV     CX,5            ;WRITE
                MOV     AH,40H
                INT     21H

.L8:            CALL    DSW_BIT
                JMP     .L5

DSW_BIT:        MOV     EAX,[TOTALTICKS]        ;[SEG_DS]:[DS_BUF_PTR]=
                MOV     EDX,EAX                 ;=MIN(400H,TOTALTICKS-DS_TIMER)
                XCHG    EAX,[DS_TIMER]          ;DS_BUF_PTR=+2
                SUB     EDX,EAX
                CMP     EDX,400H
                JBE     .L1

                MOV     DX,400H
.L1:            PUSH    DS
                LDS     BX,DWORD [DS_BUF_PTR]
                MOV     [BX],DX
                ADD     BX,2
                POP     DS

                CMP     BX,8000
                MOV     [DS_BUF_PTR],BX
                JZ      DSW_FLUSH

                RETN

DSW_FLUSH:      PUSH    ES
                XOR     BX,BX
                MOV     ES,[DS_BUF_PTR+2]
.L8:            MOV     AX,[DS_MVAL]
                MOV     CX,[ES:BX]
                MOV     DX,CX
                CMP     AX,CX
                JB      .L1

                SHR     DX,1            ;DS_MVAL>=[ES:BX]
                ADD     DX,CX
                CMP     AX,DX
                JA      .L2

.L7:            ADD     [DS_MSUM],ECX   ;DS_MVAL<=1.5*([ES:BX])
                INC     [DS_MCOUNT]
                CMP     AX,CX
                JZ      .L3

                JS      .L4

                SUB     AX,2
.L4:            INC     AX
.L3:            MOV     [DS_MVAL],AX
                JMP     .L5

.L2:            MOV     DX,CX
                SUB     DX,[ES:BX+2]
                JNS     .L6

                NEG     DX
.L6:            CMP     DX,7
                JA      .L7

                MOV     [DS_MVAL],CX
                MOV     [DS_MSUM],ECX
                MOV     [DS_MCOUNT],1
                JMP     .L5

.L1:            MOV     DX,AX
                SHR     DX,1
                ADD     DX,AX
                CMP     DX,CX
                JA      .L7

.L5:            ADD     BX,2
                CMP     BX,[DS_BUF_PTR]
                JNZ     .L8

                MOV     EAX,[DS_MSUM]
                XOR     EDX,EDX
                DIV     [DS_MCOUNT]
                SHL     EDX,1
                CMP     EDX,[DS_MCOUNT]
                JB      .L9

                INC     AX
.L9:            MOV     [DS_MVAL],AX
                MOV     CX,AX
                SHR     CX,1
                MOV     [DS_MVAL2],CX
                
                XOR     BX,BX
                XOR     DI,DI
.L15:           MOV     AX,[ES:BX]
                XOR     DX,DX
                ADD     AX,[DS_MVAL2]
                DIV     [DS_MVAL]
                OR      AX,AX
                JNZ     .L10

                INC     AX
.L10:           MOV     DX,AX
                MOV     AX,WORD [DS_LBC]
.L11:           ROL     [DS_SBUF],1
                RCL     AL,1
                INC     AH
                DEC     DX
                CMP     AH,8
                JZ      .L12

                OR      DX,DX
                JNZ     .L11

.L14:           ADD     BX,2
                NOT     [DS_SBUF]
                MOV     WORD [DS_LBC],AX
                CMP     BX,[DS_BUF_PTR]
                JNZ     .L15

                MOV     CX,DI
                XOR     DX,DX
                MOV     BX,[DEV1FH]
                MOV     [DS_BUF_PTR],DX
                PUSH    DS
                PUSH    ES
                POP     DS
                MOV     AH,40H
                INT     21H
                POP     DS
                POP     ES
                RETN

.L12:           STOSB
                XOR     AX,AX
                OR      DX,DX
.L17:           JZ      .L14

                ROL     [DS_SBUF],1
                RCL     AL,1
                INC     AH
                DEC     DX
                JMP     .L17

RD_DS_BUF:      PUSH    EAX
                MOV     EAX,[DS_RPOSC]
                MOV     [DS_RPOSP],EAX
                ADD     EAX,8000                ;ds buffer size
                CMP     EAX,[DS_RPOSE]
                JB      .L1

                MOV     EAX,[DS_RPOSE]
.L1:            MOV     [DS_RPOSC],EAX
                PUSH    CX
                SUB     EAX,[DS_RPOSP]
                MOV     CX,AX
                MOV     AH,3FH
                PUSH    DS
                XOR     DX,DX
                MOV     DS,[DS_BUF_PTR+2]
                INT     21H
                POP     DS
                POP     CX
                POP     EAX
                RETN

DS_AUX1:        MOV     EDX,[DS_TIMER]
                MOV     EAX,[TOTALTICKS]
                ADD     EDX,400H
                SUB     EAX,400H
                CMP     EAX,EDX
                RETN

CDS_IO_RD.L1B:  CALL    DS_AUX1
                JB      CDS_IO_WR.GL1

                MOV     DH,[CPU_1]
                MOV     BX,1
                OR      DH,8
                CALL    MSTORE_DH
                AND     DH,0F7H
                CALL    MSTORE_DH
                JMP     CDS_IO_WR.GL1

CDS_IO_RD.L1A:  MOV     [DS_TIMER],EAX
                JMP     CDS_IO_WR.GL1

CDS_IO_RD:      TEST    [CPU_1],8
                JNZ     CDS_IO_WR.GL2

                CMP     [DS_MODE],1
                PUSH    EAX
                PUSH    EDX
                PUSH    CX
                JA      .L1B

                JZ      .L1

                MOV     AX,[DS_QENTR]     ;1ST INIT
                CMP     AX,[DS_HPOSN]
                JBE     CDS_IO_WR.GL1

                CALL    DS_AUX1
                JAE     .L1A

                TEST    [LED],30H
                JPE     CDS_IO_WR.GL1

                INC     [DS_MODE]
                MOV     EAX,[TOTALTICKS]
                MOV     [DS_TIMER],EAX
                MOV     CX,5
                MOV     EAX,[DS_NPOS]
                ADD     EAX,ECX
                MOV     [DS_RPOSE],EAX
                MOV     [DS_MVAL],CX
                MOV     AH,3FH
                MOV     DX,DS_NPOS
                MOV     BX,[DEV1FH]
                INT     21H
                MOV     EAX,[DS_NPOS]
                SUB     EAX,[DS_RPOSE]
                MOV     [DS_RPOSE],EAX
                MOV     [DS_RPOSC],0

.L1:            MOV     EAX,[TOTALTICKS]          ;READ BIT
                MOV     BX,[DS_MVAL]
                SUB     EAX,[DS_TIMER]
                XOR     EDX,EDX
                DIV     EBX
                AND     [CPU_1],0EFH
                SHL     EDX,1
                CMP     EDX,EBX
                JB      .L2

                INC     EAX
.L2:            MOV     CL,AL
                SHR     EAX,3
                MOV     [DS_RPOSBY],EAX
                AND     CX,7
.L3:            CMP     EAX,[DS_RPOSC]
                JB      .L4

                CMP     EAX,[DS_RPOSE]
                MOV     BX,[DEV1FH]
                JB      .L5

                MOV     EAX,[DS_NPOS]
                SUB     EAX,[DS_RPOSE]
                SUB     EAX,5
                MOV     [DS_NPOS],EAX
                MOV     DX,AX
                SHR     EAX,16
                MOV     CX,AX
                MOV     AX,4200H
                INT     21H

                MOV     [DS_MODE],0
                MOV     EAX,[TOTALTICKS]
                JMP     .L1A

.L5:            CALL    RD_DS_BUF
                JMP     .L3

.L4:            SUB     EAX,[DS_RPOSP]
                MOV     BX,AX
                PUSH    DS
                MOV     DS,[DS_BUF_PTR+2]
                MOV     AL,[BX]
                POP     DS

                SUB     CL,7
                NEG     CL
                BT      AX,CX
                RCL     CH,5
                OR      [CPU_1],CH
                JMP     CDS_IO_WR.GL1

READ_DS_DATA:   MOV     EAX,[DS_TIMER]    ; READ BIT
                INC     [DS_TIMER]

.L1:            CMP     EAX,[DS_RPOSC]
                JB      .L2

                CMP     EAX,[DS_RPOSE]
                JAE     .L3
                MOV     BX,[CBM_FH]
                CALL    RD_DS_BUF
                JMP     .L1

.L2:            SUB     EAX,[DS_RPOSP]
                MOV     BX,AX
                PUSH    DS
                MOV     DS,[DS_BUF_PTR+2]
                MOV     AL,[BX]
                POP     DS
                SHL     [DS_MSUM],8
                MOV     BYTE [DS_MSUM],AL
                MOV     EAX,[DS_MSUM]
                MOV     CX,31
                STC
.L3:            RETN

READ_DS_BYTE.L8:MOV     [DS_SBUF],1
READ_DS_BYTE.L5:CMP     CX,11
                JA      READ_DS_BYTE.L6

                OR      [DS_MSUM],EAX

READ_DS_BYTE:   CALL    READ_DS_DATA
                JNC     .L2
                
.L6:            BTS     EAX,ECX
                DEC     CX
                JC      .L5

                BTS     EAX,ECX          ; 0
                DEC     CX
                JC      .L8

                BTS     EAX,ECX          ; 0
                DEC     CX
                JC      .L8

                BTS     EAX,ECX          ; 0
                DEC     CX
                JC      .L8

                BTS     EAX,ECX          ; 1
                DEC     CX
                JNC     .L8

                BTS     EAX,ECX          ; 1
                DEC     CX
                JNC     .L8

                BTS     EAX,ECX          ; 1
                DEC     CX
                JNC     .L8

                BTS     EAX,ECX          ; 1
                DEC     CX
                JNC     .L8

                BTS     EAX,ECX          ; 0
                DEC     CX
                JC      .L8

                BTS     EAX,ECX          ; 0
                DEC     CX
                JC      .L8

                BTS     EAX,ECX          ; 1
                DEC     CX
                JNC     .L8

                BTS     EAX,ECX          ; 1
                DEC     CX
                JNC     .L8

                OR      [DS_MSUM],EAX
                MOV     [DS_LBQ],9
.L10:           CALL    READ_DS_DATA
                JNC     .L2

.L3:            DEC     CX
                SHL     EAX,1
                JC      .L3

                JS      .L4

                STC                     ; ->0
                RCR     [DS_TEMP],1
                JMP     .L1

.L4:            SHR     [DS_TEMP],1     ; ->1
.L1:            SUB     CX,5
                SHL     EAX,5
                DEC     [DS_LBQ]
                JZ      .L9

                CMP     CX,11
                JA      .L3

.L9:            SUB     CX,31
                NEG     CX
                XOR     EAX,EAX
.L7:            STC
                RCR     EAX,1
                LOOP    .L7
                OR      [DS_MSUM],EAX
                CMP     [DS_LBQ],0
                JNE     .L10

                SHL     [DS_TEMP],1
                MOV     AL,BYTE [DS_TEMP+1]
                STC
.L2:            RETN

