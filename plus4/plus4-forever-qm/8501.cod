XRESET:         MOV     AX,SEG SEG_ROM -800H    ;SET ROM MAP
                MOV     [SA_ROM_LO],AX
                MOV     [SA_ROM_HI],AX
                CALL    SET_MDATA_SEG
                MOV     BX,0FFFCH               ;USE RESET VECTOR
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BX
                CALL    MREAD_DH
                MOV     [PC],DX
                JMP     RESET_DS

SET_MDATA_SEG:  PUSH    AX
                TEST    [TED_12],4
                MOV     AX,FS
                JZ      .L1

                MOV     AX,[SA_ROM_HI]
                TEST    [MDATA_OFFSET],40H
                JNZ     .L1

                MOV     AX,[SA_ROM_LO]
.L1:            MOV     [MDATA_SEG],AX
                POP     AX
                RETN

MSTORE_DH:      CMP     [WATCHPOINT_FLAG],0
                JE      .L1W

                PUSH    CX
                XCHG    AX,BX
                MOV     CX,WORD [D_BUF1]
                OR      CX,CX
                JZ      .L1C
                PUSH    ES
                PUSH    DS
                POP     ES
                PUSH    DI
                MOV     DI,D_BUF1+2     ;$$$
                REPNZ   SCASW
                JNZ     .L1D
                DEC     [WATCHPOINT_FLAG]
.L1D:           POP     DI
                POP     ES
.L1C:           XCHG    AX,BX
                POP     CX

.L1W:           CMP     BX,1
                JA      .L1
                JZ      .L1A

                MOV     [CPU_0],DH
                RETN

.L1A:           PUSH    DX              ;test: have CPU1 value changed?
                PUSH    AX              ;yes - goto CPU_IO_WR,
                MOV     DL,[CPU_0]      ;no - nothing to do
                MOV     AL,[CPU_1]      ;
                AND     DH,DL           ;
                NOT     DL              ;
                AND     [CPU_1],DL      ;
                OR      [CPU_1],DH      ;
                MOV     [CPU1_OLD],AL   ;
                XOR     AL,[CPU_1]      ;
                MOV     [CPU1_XOR],AL   ;
                POP     AX              ;
                POP     DX              ;
                JNZ     CPU_IO_WR       ;
                RETN

.L1:            CMP     BH,0FDH
                JB      .LM
                JNZ     .L4

                CMP     BL,0FH
                JA      .L5

;                PUSH    BX              ;ACIA
;                AND     BX,3
;                MOV     [ACIA_0+BX],DH
;                POP     BX
;                RETN
                JMP     .LM

.L5:            CMP     BL,1FH
                JA      .L6

                MOV     [PIO],DH          ;PIO
                RETN

.L6:            CMP     BL,2FH
                JA      .L7

                RETN

.L7:            CMP     BL,3FH
                JA      .L8

                MOV     [KBD],DH        ;KBD
                RETN

.L8:            CMP     BL,0D0H
                JB      .LM
                CMP     BL,0DFH
                JA      .LM

                PUSH    BX              ;ROMBANK
                PUSH    AX
                AND     BX,0FH
                PUSH    BX
                MOV     [ROMMAP],BL
                AND     BL,3
                SHL     BX,1
                MOV     AX,[TSA_ROM+BX]
                POP     BX
                MOV     [SA_ROM_LO],AX
                SHR     BX,1
                AND     BL,6
                MOV     AX,[TSA_ROM+BX]
                MOV     [SA_ROM_HI],AX
                POP     AX
                POP     BX
                JMP     SET_MDATA_SEG

.L4:            OR      BH,BH
                JPO     .L9

                CMP     BL,1FH
                JA      .L10

                CMP     BL,5            ;TED
                JA      .L8A

                CMP     BL,1
                JA      .L4A

                MOV     BYTE [TIMER1_RELOAD+BX+100H],DH
                JMP     .L11

.L4A:           TEST    BL,1
                JNZ     .L11

;                PUSH    DX
;                ADD     DH,8
;                MOV     [TED_0+BX+100H],DH
;                ADC     [TED_0+BX+101H],0
;                POP     DX
;                RETN
                JMP     .L11

.L8A:           CMP     BL,6
                JNZ     .L8D
                PUSH    AX

                MOV     AL,DH
                AND     AL,7
                MOV     BYTE [Y_OFFSET],AL

                MOV     [EVSA],CHAR_VSTART+CHAR_VSIZE-1
                MOV     [SVSA],CHAR_VSTART
                TEST    DH,8                    ;24 ROWS? (0-24, 1-25)
                JNZ     .L8B
                MOV     [SVSA],CHAR_VSTART+4
                MOV     [EVSA],CHAR_VSTART+CHAR_VSIZE-5

.L8B:           MOV     AL,[TED_13]
                AND     AL,0FCH
                TEST    [TED_7],80H     ;HRM?
                JNZ     .L6C1

                TEST    DH,40H          ;ECM?
                JZ      .L6A1

.L6C1:          AND     AL,0F8H
.L6A1:          MOV     [CG_BASE],AL
                TEST    DH,20H                  ;BMM? (0-TEXT, 1-BMM)
                JZ      .L8H

                MOV     AL,[TED_12]
                AND     AL,38H
                SHL     AL,2

.L8H:           MOV     [MDATA_OFFSET],AL
                MOV     AL,DH
                AND     AL,60H
                AND     BYTE [VMODE],0F9H
                SHR     AL,4
                OR      BYTE [VMODE],AL

                POP     AX
                MOV     [TED_6],DH
                JMP     SET_MDATA_SEG

.L8D:           CMP     BL,7
                JNZ     .L8N

                PUSH    AX
                MOV     AL,DH
                AND     AL,7
                MOV     BYTE [X_OFFSET],AL
                POP     AX

                MOV     [EHSA],EHRA
                MOV     [SHSA],SHRA
                TEST    DH,8                    ;38 COLUMNS? (0-38, 1-40)
                JNZ     .L8E
                INC     [SHSA]
                DEC     [EHSA]

.L8E:           AND     BYTE [VMODE],0E7H
                MOV     [TED_7],DH
                OR      DH,DH           ;HRM? (1-HARDWARE REVERSE OFF)
                MOV     DH,[TED_13]
                JS      .L8K
                TEST    [TED_6],40H     ;ECM? (1-ECM ON)
                JZ      .L8F
                JMP     .L8L

.L8K:           OR      BYTE [VMODE],10H
.L8L:           AND     DH,0F8H
.L8F:           AND     DH,0FCH
                MOV     [CG_BASE],DH
                TEST    [TED_6],20H     ;BMM? (0-TEXT, 1-BMM)
                JNZ     .L8I
                MOV     [MDATA_OFFSET],DH
.L8I:           MOV     DH,[TED_7]
                
                TEST    DH,10H          ;MCM? (0-NORMAL, 1-MCM)
                JZ      .L8J
                OR      BYTE [VMODE],8
.L8J:           RETN

.L8N:           CMP     BL,8
                JNZ     .L1N

                PUSH    AX
                PUSH    BX

                MOV     AL,[KBD]
                XOR     BX,BX
                MOV     AH,0FFH
.L3:            SHR     AL,1
                JC      .L2C
                AND     AH,[KMATRIX+BX]
.L2C:           INC     BX
                CMP     BL,8
                JNZ     .L3

                MOV     BX,[JOY_MASK]
                TEST    DH,6
                JNZ     .L2B
                MOV     AL,BH
                AND     AL,BL
                JMP     .L2A

.L2B:           TEST    DH,2
                JNZ     .L2D
                MOV     AL,BH
                JMP     .L2A

.L2D:           TEST    DH,4
                JNZ     .L2E
                MOV     AL,BL
                JMP     .L2A

.L2E:           MOV     AL,0FFH
.L2A:           AND     AH,AL
                MOV     [TED_8],AH
                POP     BX
                POP     AX
                RETN

.L1N:           CMP     BL,9
                JNZ     .L4N

                PUSH    DX
                NOT     DH
                AND     DH,[TED_9]
                OR      DH,80H
                TEST    DH,5AH
                JNZ     .L12

                AND     DH,7FH
.L12:           MOV     [TED_9],DH
                POP     DX
                RETN

.L4N:           CMP     BL,0CH
                JNZ     .L5A

                MOV     [TED_D],DH
                AND     [TED_D],3
                RETN

.L5A:           CMP     BL,0DH
                JNZ     .L5N

                MOV     [TED_C],DH
                RETN

.L5N:           CMP     BL,0EH
                JNZ     .L9A

                MOV     [TED_E],DH
                JMP     [SOUND_0E]

.L9A:           CMP     BL,0FH
                JNZ     .L10A

                MOV     [TED_F],DH
                JMP     [SOUND_0F]

.L10A:          CMP     BL,10H
                JNZ     .L11N

                MOV     [TED_10],DH
                JMP     [SOUND_10]

.L11N:          CMP     BL,11H
                JNZ     .L12N

                MOV     [TED_11],DH
                JMP     [SOUND_11]

.L12N:          CMP     BL,12H
                JNZ     .L6N

                MOV     [TED_12],DH
                TEST    [TED_6],20H     ;BMM?
                JZ      .L12A

                AND     DH,38H
                SHL     DH,2
                MOV     [MDATA_OFFSET],DH
                MOV     DH,[TED_12]
.L12A:          CALL    SET_MDATA_SEG
                JMP     [SOUND_12]

.L6N:           CMP     BL,13H
                JNZ     .L7A

                PUSH    DX
                AND     DH,0FEH
                AND     [TED_13],1
                OR      [TED_13],DH
                TEST    [TED_7],80H     ;HRM?
                JNZ     .L6C

                TEST    [TED_6],40H     ;ECM?
                JZ      .L6A

.L6C:           AND     DH,0F8H
.L6A:           AND     DH,0FCH
                MOV     [CG_BASE],DH
                TEST    [TED_6],20H     ;BMM?
                JNZ     .L6B

                MOV     [MDATA_OFFSET],DH
.L6B:           POP     DX
                JMP     SET_MDATA_SEG

.L7A:           CMP     BL,14H
                JNZ     .L11A3

                PUSH    DX
                MOV     [TED_14],DH
                AND     DH,0F8H
                MOV     [VM_BASE],DH
                POP     DX
                RETN

.L11A3:         CMP     BL,15H
                JNZ     .L11A5

                MOV     BYTE [COLOR0],DH
                MOV     BYTE [COLOR0+1],DH
                JMP     .L11

.L11A5:         CMP     BL,16H
                JNZ     .L11A6

                MOV     BYTE [COLOR1],DH
                MOV     BYTE [COLOR1+1],DH
                JMP     .L11

.L11A6:         CMP     BL,17H
                JNZ     .L11A4

                MOV     BYTE [COLOR2],DH
                MOV     BYTE [COLOR2+1],DH
                JMP     .L11

.L11A4:         CMP     BL,19H
                JNZ     .L11A1

                MOV     BYTE [BORDER_COLOR],DH
                MOV     BYTE [BORDER_COLOR+1],DH
                MOV     BYTE [BORDER_COLOR+2],DH
                MOV     BYTE [BORDER_COLOR+3],DH
                JMP     .L11

.L11A1:         CMP     BL,1AH
                JNZ     .L11A2
                MOV     [TED_1B],DH
                AND     [TED_1B],3
                RETN

.L11A2:         CMP     BL,1BH
                JNZ     .L11A
                MOV     [TED_1A],DH
                RETN

.L11A:          CMP     BL,1CH
                JNZ     .L11B

                MOV     [TED_1D],DH
                AND     [TED_1D],1
                RETN

.L11B:          CMP     BL,1DH
                JNZ     .L11C

                MOV     [TED_1C],DH
                RETN

.L11C:          CMP     BL,1EH
                JNZ     .L11D
                PUSH    AX
                MOV     AL,DH
                SHR     AL,2
                ;MOV     [TED_1E],AL     ;***WRONG!
                POP     AX
                RETN

.L11D:          CMP     BL,1FH
                JNZ     .L11

                PUSH    AX
                MOV     AL,DH

                AND     AL,7
                MOV     [VSA],AL
                MOV     AL,DH
                AND     AL,78H
                SHR     AL,3

                OR      AL,0F0H
                MOV     [BLINK_COUNT],AL
                POP     AX

.L11:           MOV     [TED_0+BX+100H],DH
                RETN

.L10:           CMP     BL,3EH
                JNZ     .L14
                OR      [TED_13],1      ;ROM_SELECT
                RETN

.L14:           CMP     BL,3FH
                JNZ     .LM
                AND     [TED_13],0FEH   ;RAM_SELECT
                RETN

.L9:                                    ;IF IEC_PRESENT
;                CMP     BL,0C0H
;                JB      .LM
;                CMP     BL,0DFH
;                JA      .L15
;
;                PUSH    BX              ;IEC9
;                AND     BX,7
;                MOV     [IEC9_0+BX],DH
;                POP     BX
;                RETN

;.L15:           PUSH    BX              ;IEC8
;                AND     BX,7
;                MOV     [IEC8_0+BX],DH
;                POP     BX
;                RETN

.LM:            MOV     [FS:BX],DH
                RETN

MREAD_DH:       CMP     BX,1
                JA      .L1
                JZ      CPU_IO_RD

                MOV     DH,[CPU_0]
                RETN

.L1:            CMP     BH,0FDH
                JB      .LM
                JNZ     .L4

                CMP     BL,0FH
                JA      .L5

;                PUSH    BX              ;ACIA
;                AND     BX,3
;                MOV     DH,[ACIA_0+BX]
;                POP     BX
;                RETN
                JMP     .LM

.L5:            CMP     BL,1FH
                JA      .L6

                MOV     DH,10H          ;PIO
                AND     DH,[LED]
                SHR     DH,2
                NOT     DH
                AND     DH,[PIO]
                RETN

.L6:            CMP     BL,30H
                JB      .LM
                CMP     BL,3FH
                JA      .LM

                MOV     DH,[KBD]        ;KBD
                RETN

.L4:            OR      BH,BH
                JPO     .L9

                CMP     BL,1FH
                JA      .LM1

                CMP     BL,0CH          ;TED
                JNZ     .L3

                MOV     DH,[TED_D]
                OR      DH,0FCH
                RETN

.L3:            CMP     BL,0DH
                JNZ     .L4A

                MOV     DH,[TED_C]
                RETN

.L4A:           CMP     BL,1AH
                JNZ     .L4B

                MOV     DH,[TED_1B]
                OR      DH,0FCH
                RETN

.L4B:           CMP     BL,1BH
                JNZ     .L4N

                MOV     DH,[TED_1A]
                RETN

.L4N:           CMP     BL,1CH
                JNZ     .L1A

                MOV     DH,[TED_1D]
                OR      DH,0FEH
                RETN

.L1A:           CMP     BL,1DH
                JNZ     .L1N

                MOV     DH,[TED_1C]
                RETN

.L1N:           CMP     BL,1EH
                JNZ     .L2A

                MOV     DH,[TED_1E]
                ;ADD     DH,033H
                CMP     DH,57
                JB      .L1Y

                SUB     DH,57

.L1Y:           SHL     DH,2
                PUSH    AX
                MOV     AL,BYTE [TOTALTICKS]
                AND     AL,3
                OR      DH,AL
                POP     AX
                RETN

.L2A:           CMP     BL,1FH
                JNZ     .L2C

                PUSH    AX
                MOV     AL,[VSA]
                MOV     DH,[BLINK_COUNT]
                AND     DH,0FH
                SHL     DH,3
                OR      AL,DH
                MOV     DH,[TED_1F]
                AND     DH,80H
                OR      DH,AL
                POP     AX
                RETN

.L2C:           MOV     DH,[TED_0+BX+100H]
                RETN

.L9:            JMP     .LM1            
;                CMP     BL,0C0H         ;IF IEC_PRESENT
;                JB      .LM
;                CMP     BL,0DFH
;                JA      .L15

;                PUSH    BX              ;IEC9
;                AND     BX,7
;                MOV     DH,[IEC9_0+BX]
;                POP     BX
;                RETN

;.L15:           PUSH    BX              ;IEC8
;                AND     BX,7
;                MOV     DH,[IEC8_0+BX]
;                POP     BX
;                RETN

.LM:            OR      BH,BH
                JNS     .LR

.LM1:           TEST    [TED_13],1
                JZ      .LR

                MOV     GS,[SA_ROM_LO]  ;$$$
                TEST    BH,40H
                JZ      .L16

                CMP     SI,0F070H       ;LOAD
                JNZ     .L16B

                TEST    [ROMMAP],0CH
                JNZ     .L16B

                CMP     [FS:93H],CH             ;VERIFY?
                JNZ     .L16B

                CMP     BYTE [FS:0AEH],8        ;DEV
                JNZ     .L16B

                ;CMP     [FS:0ABH],CH           ;FILENAME LENGTH
                ;JE      .L16B

                PUSHA
                MOV     AX,WORD [FS:0B4H]       ;LOAD ADDR
                MOV     [FD_LA],AX
                CALL    FD_LOAD
                POPA
                CMP     [FD_ERR],CH
                JNE     .L16B

                MOV     BYTE [FS:BP],0F0H       ;HIGH ADDR OF JSR$F0EB
                MOV     BYTE [FS:BP-1],0EAH     ;LOW-1 ADDR OF JSR$F0EB
                MOV     BYTE [FS:BP-2],0F1H     ;HIGH ADDR OF JSR$F189
                MOV     BYTE [FS:BP-3],88H      ;LOW-1 ADDR OF JSR$F189
                SUB     BP,4
                MOV     DH,60H          ;RTS
                AND     AL,0FEH         ;CY <- 0
                ;MOV     CL,[FD_BUF]
                ;MOVZX   DI,[FD_BUF+1]
                MOV     [FS:90H],CH     ;ST <- 0
                RETN

.L16B:          MOV     GS,[SA_ROM_HI]  ;$$$
                CMP     BH,0FCH         ;KERNEL FIX
                JNZ     .L16

                MOV     GS,[TSA_ROM]    ;$$$

.L16:           MOV     DH,[GS:BX]
                RETN

.LR:            MOV     DH,[FS:BX]
                RETN

CPU8501:        MOV     SI,[PC]
.L0:            MOV     BP,[SPR]
                MOV     AX,WORD [SR]
                MOV     CX,[XR]
                MOV     DI,[YR]

                TEST    AL,4
                JNZ     .L4

                MOV     DL,[TED_9]
                AND     DL,[TED_A]
                TEST    DL,5AH
                JZ      .L4

                CMP     [IRQTICKS],1
                JL      .L3

                MOV     [IRQTICKS],CH
                CALL    .IRQ
                JMP     .L5

.L3:            MOV     [IRQTICKS],1
.L4:            MOV     BX,SI
                CALL    MREAD_DH
                MOVZX   BX,DH
                CALL    WORD [OPP+EBX*2]
.L5:            SUB     [TICKS],DL

                MOV     [PC],SI
                MOV     [SPR],BP
                MOV     WORD [SR],AX
                MOV     [XR],CX
                MOV     [YR],DI
                RETN

.IRQ:           AND     AL,0EFH
.L2X:           MOV     BX,BP
                MOV     DX,SI
                MOV     [FS:BX],DH      ;STACK!!!
                DEC     BL
                MOV     [FS:BX],DL
                DEC     BL
                MOV     [FS:BX],AL
                DEC     BL
                MOV     BP,BX
                MOV     BX,0FFFEH
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BX
                CALL    MREAD_DH
                MOV     SI,DX
                
                MOV     DL,7            ;IRQ TIMING
                OR      AL,4
                RETN

O00:            ADD     SI,2            ;BRK
                JMP     CPU8501.L2X

O01:            ADDR_IZP_X 6            ;ORA (zp,X)
                LOGIC_OPER OR

O05:            ADDR_ZP 3               ;ORA zp
                LOGIC_OPER OR

O06:            ADDR_ZP 5               ;ASL zp
                SHIFT_MEM_L

O08:            ADDR_MISS 3             ;PHP
                MOV     BX,BP
                OR      AL,10H
                MOV     [FS:BX],AL
                DEC     BL
                MOV     BP,BX
                RETN

O09:            ADDR_IM 2               ;ORA im
                LOGIC_OPER OR

O0A:            ADDR_MISS 2             ;ASL ac
                AND     AL,NOT (ZEF OR SIF OR CAF)
                SHL     AH,1
                ADC     AL,CH
                OR      AH,AH
                JNZ     O0A_1
                OR      AL,ZEF
O0A_1:          JNS     O0A_2
                OR      AL,SIF
O0A_2:          RETN

O0D:            ADDR_ABS 4              ;ORA abs
                LOGIC_OPER OR

O0E:            ADDR_ABS 6              ;ASL abs
                SHIFT_MEM_L

O10:            BRANCH1 JS              ;BPL

O11:            ADDR_IZP_Y 5            ;ORA (zp),Y
                LOGIC_OPER OR

O15:            ADDR_ZP_X 4             ;ORA zp,X
                LOGIC_OPER OR

O16:            ADDR_ZP_X 6             ;ASL zp,X
                SHIFT_MEM_L

O18:            CLRF CAF                ;CLC

O19:            ADDR_ABS_Y 4            ;ORA abs,Y
                LOGIC_OPER OR

O1D:            ADDR_ABS_X 4            ;ORA abs,X
                LOGIC_OPER OR

O1E:            ADDR_ABS_X1 7           ;ASL abs,X
                SHIFT_MEM_L

O20:            GET_WORD NB             ;JSR abs
                ADD     SI,2
                MOV     BX,BP
                XCHG    DX,SI
                MOV     [FS:BX],DH
                DEC     BL
                MOV     [FS:BX],DL
                DEC     BL
                MOV     BP,BX
                MOV     DL,6
                RETN

O21:            ADDR_IZP_X 6            ;AND (zp,X)
                LOGIC_OPER AND

O24:            ADDR_ZP 3               ;BIT zp
                AND     AL,NOT (ZEF OR SIF OR OVF)
                TEST    AH,DH
                JNZ     O24_1
                OR      AL,ZEF
O24_1:          OR      DH,DH
                JNS     O24_2
                OR      AL,SIF
O24_2:          TEST    DH,OVF
                JZ      O24_3
                OR      AL,OVF
O24_3:          RETN

O25:            ADDR_ZP 3               ;AND zp
                LOGIC_OPER AND

O26:            ADDR_ZP 5               ;ROL zp
                ROTATE_MEM RCL

O28:            ADDR_MISS 4             ;PLP
                MOV     BX,BP           
                INC     BL
                MOV     AL,[FS:BX]
                OR      AL,30H
                MOV     BP,BX
                RETN

O29:            ADDR_IM 2               ;AND im
                LOGIC_OPER AND

O2A:            ADDR_MISS 2             ;ROL ac
                ROTATE_AC RCL           

O2C:            ADDR_ABS 4              ;BIT abs
                AND     AL,NOT (ZEF OR SIF OR OVF)
                TEST    AH,DH
                JNZ     O2C_1
                OR      AL,ZEF
O2C_1:          OR      DH,DH
                JNS     O2C_2
                OR      AL,SIF
O2C_2:          TEST    DH,OVF
                JZ      O2C_3
                OR      AL,OVF
O2C_3:          RETN

O2D:            ADDR_ABS 4              ;AND abs
                LOGIC_OPER AND

O2E:            ADDR_ABS 6              ;ROL abs
                ROTATE_MEM RCL

O30:            BRANCH1 JNS             ;BMI

O31:            ADDR_IZP_Y 5            ;AND (zp),Y
                LOGIC_OPER AND

O35:            ADDR_ZP_X 4             ;AND zp,X
                LOGIC_OPER AND

O36:            ADDR_ZP_X 6             ;ROL zp,X
                ROTATE_MEM RCL

O38:            SETF CAF                ;SEC

O39:            ADDR_ABS_Y 4            ;AND abs,Y
                LOGIC_OPER AND

O3D:            ADDR_ABS_X 4            ;AND abs,X
                LOGIC_OPER AND

O3E:            ADDR_ABS_X1 7           ;ROL abs,X
                ROTATE_MEM RCL

O40:            MOV     BX,BP           ;RTI
                INC     BL
                MOV     AL,[FS:BX]
                OR      AL,30H
                INC     BL
                MOV     DL,[FS:BX]
                INC     BL
                MOV     DH,[FS:BX]
                MOV     BP,BX
                MOV     SI,DX
                MOV     DL,6
                RETN

O41:            ADDR_IZP_X 6            ;EOR (zp,X)
                LOGIC_OPER XOR

O45:            ADDR_ZP 3               ;EOR zp
                LOGIC_OPER XOR

O46:            ADDR_ZP 5               ;LSR zp
                SHIFT_MEM_R

O48:            ADDR_MISS 3             ;PHA
                MOV     BX,BP
                MOV     [FS:BX],AH
                DEC     BL
                MOV     BP,BX
                RETN

O49:            ADDR_IM 2               ;EOR im
                LOGIC_OPER XOR

O4A:            ADDR_MISS 2             ;LSR ac
X_O4A:          AND     AL,NOT (ZEF OR SIF OR CAF)
                SHR     AH,1
                ADC     AL,CH
                OR      AH,AH
                JNZ     O4A_1
                OR      AL,ZEF
O4A_1:          RETN

O4C:            GET_WORD NB             ;JMP abs
                MOV     SI,DX
                MOV     DL,3
                RETN

O4D:            ADDR_ABS 4              ;EOR abs
                LOGIC_OPER XOR

O4E:            ADDR_ABS 6              ;LSR abs
                SHIFT_MEM_R

O50:            BRANCH2 JNZ,OVF         ;BVC

O51:            ADDR_IZP_Y 5            ;EOR (zp),Y
                LOGIC_OPER XOR

O55:            ADDR_ZP_X 4             ;EOR zp,X
                LOGIC_OPER XOR

O56:            ADDR_ZP_X 6             ;LSR zp,X
                SHIFT_MEM_R

O58:            CLRF 4                  ;CLI

O59:            ADDR_ABS_Y 4            ;EOR abs,Y
                LOGIC_OPER XOR

O5D:            ADDR_ABS_X 4            ;EOR abs,X
                LOGIC_OPER XOR

O5E:            ADDR_ABS_X1 7           ;LSR abs,X
                SHIFT_MEM_R

O60:            MOV     BX,BP           ;RTS
                INC     BL
                MOV     DL,[FS:BX]
                INC     BL
                MOV     DH,[FS:BX]
                MOV     SI,DX
                MOV     BP,BX
                INC     SI
                MOV     DL,6
                RETN

O61:            ADDR_IZP_X 6            ;ADC (zp,X)
                ADDITION

O65:            ADDR_ZP 3               ;ADC zp
                ADDITION

O66:            ADDR_ZP 5               ;ROR zp
                ROTATE_MEM RCR

O68:            ADDR_MISS 4             ;PLA
                MOV     BX,BP           
                INC     BL
                MOV     AH,[FS:BX]
                MOV     BP,BX
                SETF_L_AC

O69:            ADDR_IM 2               ;ADC im
                ADDITION

O6A:            ADDR_MISS 2             ;ROR ac
                ROTATE_AC RCR

O6C:            GET_WORD                ;JMP (abs)
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     SI,DX
                MOV     DL,5
                RETN

O6D:            ADDR_ABS 4              ;ADC abs
                ADDITION

O6E:            ADDR_ABS 6              ;ROR abs
                ROTATE_MEM RCR

O70:            BRANCH2 JZ,OVF          ;BVS

O71:            ADDR_IZP_Y 5            ;ADC (zp),Y
                ADDITION

O75:            ADDR_ZP_X 4             ;ADC zp,X
                ADDITION

O76:            ADDR_ZP_X 6             ;ROR zp,X
                ROTATE_MEM RCR

O78:            SETF 4                  ;SEI

O79:            ADDR_ABS_Y 4            ;ADC abs,Y
                ADDITION

O7D:            ADDR_ABS_X 4            ;ADC abs,X
                ADDITION

O7E:            ADDR_ABS_X1 7           ;ROR abs,X
                ROTATE_MEM RCR

O81:            ADDR_IZP_X 6,NB         ;STA (zp,X)
                STORE_MEM AH

O84:            GET_BYTE                ;STY zp
                ADD     SI,2
                MOV     DX,DI
                MOV     DH,DL
                MOV     DL,3
                JMP     MSTORE_DH

O85:            ADDR_ZP 3,NB            ;STA zp
                STORE_MEM AH

O86:            ADDR_ZP 3,NB            ;STX zp
                STORE_MEM CL

O88:            ADDR_MISS 2             ;DEY
                AND     AL,NOT (ZEF OR SIF)
                XCHG    AX,DI
                DEC     AL
                XCHG    AX,DI
                JNZ     O88_2
                OR      AL,ZEF
O88_2:          JNS     O88_3
                OR      AL,SIF
O88_3:          RETN

O8A:            ADDR_MISS 2             ;TXA
                MOV     AH,CL
                SETF_L_AC

O8C:            GET_WORD                ;STY abs
                ADD     SI,3
                MOV     DX,DI
                MOV     DH,DL
                MOV     DL,4
                JMP     MSTORE_DH

O8D:            ADDR_ABS 4,NB           ;STA abs
                STORE_MEM AH

O8E:            ADDR_ABS 4,NB           ;STX abs
                STORE_MEM CL

O90:            BRANCH2 JNZ,CAF         ;BCC

O91:            GET_BYTE                ;STA (zp),Y
                ADD     SI,2
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                ADD     BX,DI
                MOV     DL,6
                STORE_MEM AH

O94:            GET_BYTE                ;STY zp,X
                ADD     SI,2
                ADD     BL,CL
                MOV     DX,DI
                MOV     DH,DL
                MOV     DL,4
                JMP     MSTORE_DH

O95:            ADDR_ZP_X 4,NB          ;STA zp,X
                STORE_MEM AH

O96:            ADDR_ZP_Y 4,NB          ;STX zp,Y
                STORE_MEM CL

O98:            ADDR_MISS 2             ;TYA
                MOV     BX,DI
                MOV     AH,BL
                SETF_L_AC

O99:            GET_WORD                ;STA abs,Y
                ADD     SI,3
                ADD     BX,DI
                MOV     DL,5
                STORE_MEM AH

O9A:            ADDR_MISS 2             ;TXS
                MOV     BP,CX
                OR      BP,100H
                RETN

O9D:            ADDR_ABS_X1 5,NB        ;STA abs,X
                STORE_MEM AH

OA0:            ADDR_IM 2               ;LDY im
                MOV     BL,DH
                SETF_L_YR

OA1:            ADDR_IZP_X 6            ;LDA (zp,X)
                MOV     AH,DH
                SETF_L_AC

OA2:            ADDR_IM 2               ;LDX im
                MOV     CL,DH
                SETF_L_XR
                
OA4:            ADDR_ZP 3               ;LDY zp
                MOV     BL,DH
                SETF_L_YR

OA5:            ADDR_ZP 3               ;LDA zp
                MOV     AH,DH
                SETF_L_AC

OA6:            ADDR_ZP 3               ;LDX zp
                MOV     CL,DH
                SETF_L_XR

OA8:            ADDR_MISS 2             ;TAY
                MOV     BL,AH
                SETF_L_YR

OA9:            ADDR_IM 2               ;LDA im
                MOV     AH,DH
                SETF_L_AC

OAA:            ADDR_MISS 2             ;TAX
                MOV     CL,AH
                SETF_L_XR

OAC:            ADDR_ABS 4              ;LDY abs
                MOV     BL,DH
                XOR     BH,BH
                SETF_L_YR

OAD:            ADDR_ABS 4              ;LDA abs
                MOV     AH,DH
                SETF_L_AC

OAE:            ADDR_ABS 4              ;LDX abs
                MOV     CL,DH
                SETF_L_XR

OB0:            BRANCH2 JZ,CAF          ;BCS

OB1:            ADDR_IZP_Y 5            ;LDA (zp),Y
                MOV     AH,DH
                SETF_L_AC

OB4:            ADDR_ZP_X 4             ;LDY zp,X
                MOV     BL,DH
                SETF_L_YR

OB5:            ADDR_ZP_X 4             ;LDA zp,X
                MOV     AH,DH
                SETF_L_AC

OB6:            ADDR_ZP_Y 4             ;LDX zp,Y
                MOV     CL,DH
                SETF_L_XR

OB8:            CLRF OVF                ;CLV

OB9:            ADDR_ABS_Y 4            ;LDA abs,Y
                MOV     AH,DH
                SETF_L_AC

OBA:            ADDR_MISS 2             ;TSX
                MOV     BX,BP
                MOV     CL,BL
                SETF_L_XR

OBC:            ADDR_ABS_X 4            ;LDY abs,X
                MOV     BL,DH
                XOR     BH,BH
                SETF_L_YR

OBD:            ADDR_ABS_X 4            ;LDA abs,X
                MOV     AH,DH
                SETF_L_AC

OBE:            ADDR_ABS_Y 4            ;LDX abs,Y
                MOV     CL,DH
                SETF_L_XR

OC0:            ADDR_IM 2               ;CPY im
                AND     AL,NOT (ZEF OR SIF OR CAF)
                MOV     BX,DI
                SUB     BL,DH
                CMC
                ADC     AL,CH
                OR      BL,BL
                JNZ     OC0_2
                OR      AL,ZEF
OC0_2:          JNS     OC0_3
                OR      AL,SIF
OC0_3:          RETN

OC1:            ADDR_IZP_X 6            ;CMP (zp,X)
                COMPARE AH

OC4:            ADDR_ZP 3               ;CPY zp
                AND     AL,NOT (ZEF OR SIF OR CAF)
                MOV     BX,DI
                SUB     BL,DH
                CMC
                ADC     AL,CH
                OR      BL,BL
                JNZ     OC4_2
                OR      AL,ZEF
OC4_2:          JNS     OC4_3
                OR      AL,SIF
OC4_3:          RETN

OC5:            ADDR_ZP 3               ;CMP zp
                COMPARE AH

OC6:            ADDR_ZP 5               ;DEC zp
                DECREMENT
                                        
OC8:            ADDR_MISS 2             ;INY
                AND     AL,NOT (ZEF OR SIF)
                XCHG    AX,DI
                INC     AL
                XCHG    AX,DI
                JNZ     OC8_1
                OR      AL,ZEF
OC8_1:          JNS     OC8_2
                OR      AL,SIF
OC8_2:          RETN

OC9:            ADDR_IM 2               ;CMP im
                COMPARE AH

OCA:            ADDR_MISS 2             ;DEX
                AND     AL,NOT (ZEF OR SIF)
                DEC     CL
                JNZ     OCA_1
                OR      AL,ZEF
OCA_1:          JNS     OCA_2
                OR      AL,SIF
OCA_2:          RETN

OCC:            ADDR_ABS 4              ;CPY abs
                AND     AL,NOT (ZEF OR SIF OR CAF)
                MOV     BX,DI
                SUB     BL,DH
                CMC
                ADC     AL,CH
                OR      BL,BL
                JNZ     OCC_2
                OR      AL,ZEF
OCC_2:          JNS     OCC_3
                OR      AL,SIF
OCC_3:          RETN

OCD:            ADDR_ABS 4              ;CMP abs
                COMPARE AH

OCE:            ADDR_ABS 6              ;DEC abs
                DECREMENT

OD0:            BRANCH2 JNZ,ZEF         ;BNE

OD1:            ADDR_IZP_Y 5            ;CMP (zp),Y
                COMPARE AH

OD5:            ADDR_ZP_X 4             ;CMP zp,X
                COMPARE AH

OD6:            ADDR_ZP_X 6             ;DEC zp,X
                DECREMENT

OD8:            CLRF 8                  ;CLD

OD9:            ADDR_ABS_Y 4            ;CMP abs,Y
                COMPARE AH

ODD:            ADDR_ABS_X 4            ;CMP abs,X
                COMPARE AH

ODE:            ADDR_ABS_X1 6           ;DEC abs,X
                DECREMENT

OE0:            ADDR_IM 2               ;CPX im
                COMPARE CL

OE1:            ADDR_IZP_X 6            ;SBC (zp,X)
                SUBTRACTION

OE4:            ADDR_ZP 3               ;CPX zp
                COMPARE CL

OE5:            ADDR_ZP 3               ;SBC zp
                SUBTRACTION

OE6:            ADDR_ZP 5               ;INC zp
                INCREMENT

OE8:            ADDR_MISS 2             ;INX
                AND     AL,NOT (ZEF OR SIF)
                INC     CL
                JNZ     OE8_1
                OR      AL,ZEF
OE8_1:          JNS     OE8_2
                OR      AL,SIF
OE8_2:          RETN

OEB:                                    ;SBC im *** SUB
OE9:            ADDR_IM 2               ;SBC im
                SUBTRACTION

OEA:            XNOP 2                  ;NOP

OEC:            ADDR_ABS 4              ;CPX abs
                COMPARE CL

OED:            ADDR_ABS 4              ;SBC abs
                SUBTRACTION

OEE:            ADDR_ABS 6              ;INC abs
                INCREMENT

OF0:            BRANCH2 JZ,ZEF          ;BEQ

OF1:            ADDR_IZP_Y 5            ;SBC (zp),Y
                SUBTRACTION

OF5:            ADDR_ZP_X 4             ;SBC zp,X
                SUBTRACTION

OF6:            ADDR_ZP_X 6             ;INC zp,X
                INCREMENT

OF8:            SETF 8                  ;SED

OF9:            ADDR_ABS_Y 4            ;SBC abs,Y
                SUBTRACTION

OFD:            ADDR_ABS_X 4            ;SBC abs,X
                SUBTRACTION

OFE:            ADDR_ABS_X 6            ;INC abs,X
                INCREMENT

OF2:
OD2:
OB2:
O92:
O72:
O62:
O52:
O42:
O32:
O22:
O12:
O02:            JMP     RESET           ;JAM ***

O04:            ADDR_ZP 3,NB            ;SKB zp *** NOP2/NOOP
                RETN

O03:            GET_BYTE                ;ASL:ORA (zp,X) *** ASO/SLO
                ADD     BL,CL
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O01


O07:            GET_BYTE                ;ASL:ORA zp *** ASO/SLO
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O05

O0B:            ADDR_IM 2               ;ANC im ***
                AND     AL,NOT (ZEF OR SIF OR CAF)
                AND     AH,DH
                JNZ     O0B_1
                OR      AL,ZEF
O0B_1:          JNS     O0B_2
                OR      AL,(SIF OR CAF)
O0B_2:          RETN

O0C:            ADDR_ABS 4,NB           ;SKW abs *** NOP3/NOOP
                RETN

O0F:            GET_WORD                ;ASL:ORA abs *** ASO/SLO
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O0D

O13:            GET_BYTE                ;ASL:ORA (zp),Y *** ASO/SLO
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O13_1

                INC     BH
                INC     [TICKS]
O13_1:          AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O11

O14:            ADDR_ZP_X 4,NB          ;SKB zp,X *** NOP2/NOOP
                RETN

O17:            GET_BYTE                ;ASL:ORA zp,X *** ASO/SLO
                ADD     BL,CL
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O15

O1A:            XNOP 2                  ;NOP1 *** NOP/NOOP

O1B:            GET_WORD                ;ASL:ORA abs,Y *** ASO/SLO
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O1B_1

                INC     BH
                INC     [TICKS]
O1B_1:          AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O19

O1C:            ADDR_ABS_X 4,NB         ;SKW abs,X *** NOP3/NOOP
                RETN

O1F:            GET_WORD                ;ASL:ORA abs,X *** ASO/SLO
                SUB     [TICKS],3
                ADD     BL,CL
                JNC     O1F_1

                INC     BH
                INC     [TICKS]
O1F_1:          AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O1D

O23:            GET_BYTE                ;ROL:AND (zp,X) *** RLA
                ADD     BL,CL
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O21

O27:            GET_BYTE                ;ROL:AND zp *** RLA
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O25

O2B:            ADDR_IM 2               ;ANC im ***
                AND     AL,NOT (ZEF OR SIF OR CAF)
                AND     AH,DH
                JNZ     O2B_1
                OR      AL,ZEF
O2B_1:          JNS     O2B_2
                OR      AL,(SIF OR CAF)
O2B_2:          RETN

O2F:            GET_WORD                ;ROL:AND abs *** RLA
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O2D

O33:            GET_BYTE                ;ROL:AND (zp),Y *** RLA
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O33_1

                INC     BH
                INC     [TICKS]
O33_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O31

O34:            ADDR_ZP_X 4,NB          ;SKB zp,X *** NOP2/NOOP
                RETN

O37:            GET_BYTE                ;ROL:AND zp,X *** RLA
                ADD     BL,CL
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O35

O3A:            XNOP 2                  ;NOP1 *** NOP/NOOP

O3B:            GET_WORD                ;ROL:AND abs,Y *** RLA
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O3B_1

                INC     BH
                INC     [TICKS]
O3B_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O39

O3C:            ADDR_ABS_X 4,NB         ;SKW abs,X *** NOP3/NOOP
                RETN

O3F:            GET_WORD                ;ROL:AND abs,X *** RLA
                SUB     [TICKS],3
                ADD     BL,CL
                JNC     O3F_1

                INC     BH
                INC     [TICKS]
O3F_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCL     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O3D

O43:            GET_BYTE                ;LSR:EOR (zp,X) *** LSE/LRE/SRE
                ADD     BL,CL
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O41

O44:            ADDR_ZP 3,NB            ;SKB zp *** NOP2/NOOP
                RETN

O47:            GET_BYTE                ;LSR:EOR zp *** LSE/LRE/SRE
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O45

O4B:            ADDR_IM 2               ;AND im:LSR ac *** ALR/ADL/ASR
                AND     AH,DH
                JMP     X_O4A

O4F:            GET_WORD                ;LSR:EOR abs *** LSE/LRE/SRE
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O4D

O53:            GET_BYTE                ;LSR:EOR (zp),Y *** LSE/LRE/SRE
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O53_3

                INC     BH
                INC     [TICKS]
O53_3:          AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O51

O54:            ADDR_ZP_X 4,NB          ;SKB zp,X *** NOP2/NOOP
                RETN

O57:            GET_BYTE                ;LSR:EOR zp,X *** LSE/LRE/SRE
                ADD     BL,CL
                SUB     [TICKS],2
                AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O55

O5A:            XNOP 2                  ;NOP1 *** NOP/NOOP

O5B:            GET_WORD                ;LSR:EOR abs,Y *** LSE/LRE/SRE
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O5B_1

                INC     BH
                INC     [TICKS]
O5B_1:          AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O59

O5C:            ADDR_ABS_X 4,NB         ;SKW abs,X *** NOP3/NOOP
                RETN

O5F:            GET_WORD                ;LSR:EOR abs,X *** LSE/LRE/SRE
                SUB     [TICKS],3
                ADD     BL,CL
                JNC     O5F_1

                INC     BH
                INC     [TICKS]
O5F_1:          AND     AL,NOT CAF
                CALL    MREAD_DH
                CALL    MSTORE_DH
                SHR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O5D

O63:            GET_BYTE                ;ROR:ADC (zp,X) *** RRA
                ADD     BL,CL
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O61

O64:            ADDR_ZP 3,NB            ;SKB zp *** NOP2/NOOP
                RETN

O67:            GET_BYTE                ;ROR:ADC zp *** RRA
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O65

O6B:            ADDR_IM 2               ;AND im:ROR ac *** ARR/ADR
                AND     AL,NOT (ZEF OR SIF OR OVF OR CAF)
                AND     AH,DH           ;set V and c flags
                JNS     O6B_3     ;flags (N, Z, V) depends on
                INC     AX              ;D-flag state
O6B_3:          TEST    AH,0C0H
                JPE     O6B_2
                OR      AL,OVF
O6B_2:          BT      AX,0
                RCR     AH,1
                OR      AH,AH
                JNZ     O6B_1
                OR      AL,ZEF
O6B_1:          JNS     O6B_4
                OR      AL,SIF
O6B_4:          RETN

O6F:            GET_WORD                ;ROR:ADC abs *** RRA
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O6D

O73:            GET_BYTE                ;ROR:ADC (zp),Y *** RRA
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O73_3

                INC     BH
                INC     [TICKS]
O73_3:          CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O71

O74:            ADDR_ZP_X 4,NB          ;SKB zp,X *** NOP2/NOOP
                RETN

O77:            GET_BYTE                ;ROR:ADC zp,X *** RRA
                ADD     BL,CL
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O75

O7A:            XNOP 2                  ;NOP1 *** NOP/NOOP

O7B:            GET_WORD                ;ROR:ADC abs,Y *** RRA
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     O7B_1

                INC     BH
                INC     [TICKS]
O7B_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O79

O7C:            ADDR_ABS_X 4,NB         ;SKW abs,X *** NOP3/NOOP
                RETN

O7F:            GET_WORD                ;ROR:ADC abs,X *** RRA
                SUB     [TICKS],3
                ADD     BL,CL
                JNC     O7F_1

                INC     BH
                INC     [TICKS]
O7F_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                BTR     AX,0
                RCR     DH,1
                ADC     AL,CH
                CALL    MSTORE_DH
                JMP     O7D

O80:            ADDR_IM 2               ;SKB im *** NOP2/NOOP
                RETN
                
O82:            ADDR_IM 2               ;SKB im *** NOP2/NOOP
                RETN

O83:            ADDR_IZP_X 6,NB         ;AXS (zp,X) *** SXS/SAX
                MOV     DH,AH           ;(X & A) -> M
                AND     DH,CL
                JMP     MSTORE_DH

O87:            ADDR_ZP 3,NB            ;AXS zp *** SXS/SAX
                MOV     DH,AH           ;(X & A) -> M
                AND     DH,CL
                JMP     MSTORE_DH

O89:            ADDR_IM 2               ;SKB im *** NOP2/NOOP
                RETN

O8B:            ADDR_IM 2               ;TXA:AND im *** TAA/ANE
                MOV     AH,CL
                LOGIC_OPER AND

O8F:            ADDR_ABS 4,NB           ;AXS abs *** SXS/SAX
                MOV     DH,AH           ;(X & A) -> M
                AND     DH,CL
                JMP     MSTORE_DH

O93:            GET_BYTE                ;SHA (zp),Y *** AXA
                ADD     SI,2            ;A & X & (ZP_ADDR+1) ->M
                MOV     CH,DH
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                ADD     BX,DI
                INC     CH
                AND     CH,AH
                AND     CH,CL
                MOV     DH,CH
                XOR     CH,CH
                MOV     DL,6
                JMP     MSTORE_DH

O97:            ADDR_ZP_Y 4,NB          ;AXS zp,Y *** SXS/SAX
                MOV     DH,AH           ;(X & A) -> M
                AND     DH,CL
                JMP     MSTORE_DH

O9B:            GET_WORD                ;SHS abs,Y *** TAS
                ADD     SI,3            ;AC & XR -> SPR
                ADD     BX,DI           ;SPR & (ADDR_HI+1) -> M
                MOV     DL,AH
                AND     DL,CL
                XCHG    AX,BP
                MOV     AL,DL
                XCHG    AX,BP
                INC     DH
                AND     DH,DL
                MOV     DL,5
                JMP     MSTORE_DH

O9C:            GET_WORD                ;SHY abs,X *** SAY
                ADD     SI,3            ;YR & (ADDR_HI+1) -> M
                ADD     BX,CX
                XCHG    AX,DI
                INC     DH
                AND     DH,AL
                XCHG    AX,DI
                MOV     DL,5
                JMP     MSTORE_DH

O9E:            GET_WORD                ;SHX abs,Y *** XAS
                ADD     SI,3            ;XR & (ADDR_HI+1) -> M
                ADD     BX,DI
                INC     DH
                AND     DH,CL
                MOV     DL,5
                JMP     MSTORE_DH

O9F:            GET_WORD                ;SHA abs,Y *** AXA
                ADD     SI,3            ;AC & XR & (ADDR_HI+1) -> M
                ADD     BX,DI
                INC     DH
                AND     DH,AH
                AND     DH,CL
                MOV     DL,5
                JMP     MSTORE_DH

OA3:            ADDR_IZP_X 6            ;LDA:LDX (zp,X) *** LAX
                MOV     AH,DH
                MOV     CL,AH
                SETF_L_AC

OA7:            ADDR_ZP 3               ;LDA:LDX zp *** LAX
                MOV     AH,DH
                MOV     CL,AH
                SETF_L_AC

OAB:            ADDR_IM 2               ;LXA im *** OAL
                AND     AH,DH
                MOV     CL,AH
                LOGIC_OPER AND

OAF:            ADDR_ABS 4              ;LDA:LDX abs *** LAX
                MOV     AH,DH
                MOV     CL,DH
                SETF_L_AC

OB3:            ADDR_IZP_Y 5            ;LDA:LDX (zp),Y *** LAX
                MOV     AH,DH
                MOV     CL,DH
                SETF_L_AC

OB7:            ADDR_ZP_Y 4             ;LDA:LDX zp,Y *** LAX
                MOV     AH,DH
                MOV     CL,DH
                SETF_L_AC

OBB:            ADDR_ABS_Y 4            ;LAS ***
                AND     AL,NOT (ZEF OR SIF)
                XCHG    AX,BP           ;M & SPR -> AC,XR,SPR
                AND     AL,DH
                MOV     CL,AL
                XCHG    AX,BP
                MOV     AH,CL
                JNZ     OBB_1
                OR      AL,ZEF
OBB_1:          JNS     OBB_2
                OR      AL,SIF
OBB_2:          RETN

OBF:            ADDR_ABS_Y 4            ;LDA:LDX abs,Y *** LAX
                MOV     AH,DH
                MOV     CL,DH
                SETF_L_AC

OC2:            ADDR_IM 2               ;SKB im *** NOP2/NOOP
                RETN

OC3:            GET_BYTE                ;DEC:CMP (zp,X) *** DCC/DCP
                ADD     BL,CL
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     OC1

OC7:            GET_BYTE                ;DEC:CMP zp *** DCC/DCP
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     OC5

OCB:            ADDR_IM 2               ;SBX im *** SAX
                AND     AL,NOT (ZEF OR SIF OR CAF)
                AND     CL,AH           ;XR & AC - IM -> XR
                SUB     CL,DH
                JC      OCB_2
                INC     AX
                OR      CL,CL
OCB_2:          JNZ     OCB_1
                OR      AL,ZEF
OCB_1:          JNS     OCB_3
                OR      AL,SIF
OCB_3:          RETN

OCF:            GET_WORD                ;DEC:CMP abs *** DCC/DCP
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     OCD

OD3:            GET_BYTE                ;DEC:CMP (zp),Y *** DCC/DCP
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     OD3_3

                INC     BH
                INC     [TICKS]
OD3_3:          CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     OD1

OD4:            ADDR_ZP_X 4,NB          ;SKB zp,X *** NOP2/NOOP
                RETN

OD7:            GET_BYTE                ;DEC:CMP zp,X *** DCC/DCP
                ADD     BL,CL
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     OD5

ODA:            XNOP 2                  ;NOP1 *** NOP/NOOP

ODB:            GET_WORD                ;DEC:CMP abs,Y *** DCC/DCP
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     ODB_1

                INC     BH
                INC     [TICKS]
ODB_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     OD9

ODC:            ADDR_ABS_X 4,NB         ;SKW abs,X *** NOP3/NOOP
                RETN

ODF:            GET_WORD                ;DEC:CMP abs,X *** DCC/DCP
                SUB     [TICKS],3
                ADD     BL,CL
                JNC     ODF_1

                INC     BH
                INC     [TICKS]
ODF_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                DEC     DH
                CALL    MSTORE_DH
                JMP     ODD

OE2:            ADDR_IM 2               ;SKB im *** NOP2/NOOP
                RETN

OE3:            GET_BYTE                ;INC:SBC (zp,X) *** INS/ISB
                ADD     BL,CL
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OE1

OE7:            GET_BYTE                ;INC:SBC zp *** INS/ISB
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OE5

OEF:            GET_WORD                ;INC:SBC abs *** INS/ISB
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OED

OF3:            GET_BYTE                ;INC:SBC (zp),Y *** INS/ISB
                CALL    MREAD_DH
                MOV     DL,DH
                INC     BL
                CALL    MREAD_DH
                MOV     BX,DX
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     OF3_3

                INC     BH
                INC     [TICKS]
OF3_3:          CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OF1

OF4:            ADDR_ZP_X 4,NB          ;SKB zp,X *** NOP2/NOOP
                RETN

OF7:            GET_BYTE                ;INC:SBC zp,X *** INS/ISB
                ADD     BL,CL
                SUB     [TICKS],2
                CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OF5

OFA:            XNOP 2                  ;NOP1 *** NOP/NOOP

OFB:            GET_WORD                ;INC:SBC abs,Y *** INS/ISB
                MOV     DX,DI
                SUB     [TICKS],3
                ADD     BL,DL
                JNC     OFB_1

                INC     BH
                INC     [TICKS]
OFB_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OF9

OFC:            ADDR_ABS_X 4,NB         ;SKW abs,X *** NOP3/NOOP
                RETN

OFF:            GET_WORD                ;INC:SBC abs,X *** INS/ISB
                SUB     [TICKS],3
                ADD     BL,CL
                JNC     OFF_1

                INC     BH
                INC     [TICKS]
OFF_1:          CALL    MREAD_DH
                CALL    MSTORE_DH
                INC     DH
                CALL    MSTORE_DH
                JMP     OFD

