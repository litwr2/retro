INTR23:         PUSH    DS
                PUSH    AX
                MOV     AX,SEG_DATA
                MOV     DS,AX
                INC     [BREAK_FLAG]
                POP     AX
                POP     DS
                IRET

INTR24:         MOV     AL,3
                IRET

SET_INTR24:     MOV     AX,3524H        ;SAVE/SET INTR24 VECTOR
                INT     21H
                MOV     [SAVE24LO],BX
                MOV     [SAVE24HI],ES
                PUSH    DS
                PUSH    CS
                POP     DS
                MOV     DX,INTR24
.L1:            MOV     AX,2524H
                INT     21H
                POP     DS
                RETN

RESTORE_INTR24: MOV     DX,[SAVE24LO]   ;RESTORE INTR24 VECTOR
                PUSH    DS
                MOV     DS,[SAVE24HI]
                JMP     SET_INTR24.L1

SET_INTR23:     MOV     AX,3523H        ;SAVE/SET INTR23 VECTOR
                INT     21H
                MOV     [SAVE23LO],BX
                MOV     [SAVE23HI],ES
                PUSH    DS
                PUSH    CS
                POP     DS
                MOV     DX,INTR23
.L1:            MOV     AX,2523H
                INT     21H
                POP     DS
                RETN

RESTORE_INTR23: MOV     DX,[SAVE23LO]   ;RESTORE INTR23 VECTOR
                PUSH    DS
                MOV     DS,[SAVE23HI]
                JMP     SET_INTR23.L1

FINISHIBM:      MOV     BX,1
                MOV     DH,[CPU_1]
                OR      DH,8
                CALL    MSTORE_DH       ;CLOSE TAPE
        IF IECDEBUG > 0
                MOV AH,3EH
                MOV BX,[XXXFH]
                INT 21H
        END IF
                CALL    IEC8FLUSH
                CALL    IEC9FLUSH
                CALL    DEV1DETACH
                CALL    DEV8DETACH
                CALL    DEV9DETACH

                XOR     AX,AX           ;RESTORE LED
                MOV     ES,AX
                MOV     AL,[ES:417H]
                AND     AL,0CFH
                OR      AL,[KBD_FLAGS]
                MOV     [ES:417H],AL
                AND     AL,70H
                MOV     [LED],AL
                CALL    SET_LED

                CALL    RESTORE_INTR9
                CALL    RESTORE_INTR8
                CALL    [EXIT_SOUND]
                CALL    RESTORE_INTR24
                CALL    RESTORE_INTR23

                MOV     DL,[SAVE_FPATH]   ;RESTORE STARTUP PATH & DRIVE
                MOV     AH,0EH
                SUB     DL,'A'
                INT     21H

                MOV     AH,3BH
                MOV     DX,SAVE_FPATH
                INT     21H

                MOV     AX,3            ;SET TEXT VIDEO MODE
                INT     10H

                MOV     EAX,[RETRACE_COUNT]
                MOV     EDX,11931800/TIMERV
                MUL     EDX
                DIV     [SYNCHRO_TICKS]
                SHL     EDX,1
                CMP     EDX,[SYNCHRO_TICKS]
                JB      .L1

                INC     EAX
.L1:            CALL    SEG_CODE2:HEX2DEC
                MOV     EAX,DWORD [HEX2DECBUF+6]
                MOV     WORD [FMSG+44],AX
                SHR     EAX,16
                MOV     [FMSG+46],AL
                MOV     [FMSG+48],AH

                MOV     DX,AMSG         ;OUTPUT AUTHOR'S MESSAGE
                MOV     AH,9
                INT     21H

                MOV     DX,FMSG         ;OUTPUT AUTHOR'S MESSAGE
                MOV     AH,9
                INT     21H
                RETN

INITIBM:        CLD
                MOV     AH,30H          ;TEST DOS VERSION
                INT     21H
                XCHG    AL,AH
                CMP     AX,31EH         ;DOS >= 3.30
                JNC     .L3

                MOV     DX,ERROR1
                MOV     AH,9
                INT     21H
                POP     AX              ;EXIT!!!
                RETF

.L3:            XOR     AX,AX           ;TEST MOUSE PRESENCE
                INT     33H
                MOV     [ISMOUSE],AL

        IF IECDEBUG > 0
                MOV AH,3CH
                MOV CX,20H
                MOV DX,XXXFN
                INT 21H
                MOV [XXXFH],AX
        END IF

                XOR     EBX,EBX         ;INIT 32-BIT REGISTERS
                XOR     ESI,ESI
                XOR     ECX,ECX
                XOR     EDI,EDI
                XOR     ECX,ECX
                XOR     EBP,EBP

                CALL    SEG_CODE2:INIT_VIDEO

                MOV     AX,3D00H
                MOV     DX,CFGFILE
                INT     21H
                JC      .L6

                MOV     BX,AX
                MOV     AH,3FH
                MOV     CX,3
                MOV     DX,KBD_BUF
                INT     21H

                MOV     AH,3EH
                INT     21H

                MOV     AX,WORD [KBD_BUF]
                MOV     [VIDMODE],AL            ;test with - in msg16!!!
                MOV     [FRAMESKIP],AH
                MOV     AL,[KBD_BUF+2]
                OR      [SJCFG],AL

.L6:            MOV     AX,SEG_RAM      ;INIT FS
                MOV     FS,AX

                CALL    SET_VMODE       ;SET VIDEO MODE
                CALL    SET_INTR23
                CALL    SET_INTR24
                CALL    SET_INTR9
                CALL    SET_INTR8

                MOVZX   BX,[SJCFG]
                AND     BL,3
                CALL    [SOUND_SRC+EBX*2]
                CALL    [RESET_SOUND]

                MOV     AL,[SJCFG]
                MOV     AH,AL
                SHR     AL,5
                SHR     AH,2
                AND     AH,7
                MOV     WORD [JOY1_ST],AX
                CALL    INIT_JOY

                XOR     SI,SI           ;LOAD ROMs
                MOV     DI,SEG_ROM
.L2:            MOV     AX,3D00H
                LEA     DX,[ROMS_FN+SI]
                INT     21H
                JC      .L5

                MOV     BX,AX
                MOV     AX,4202H
                XOR     CX,CX
                XOR     DX,DX
                INT     21H
                OR      DX,DX
                JNZ     .L1

                CMP     AX,16*1024
                JNZ     .L1

                MOV     AX,4200H
                INT     21H
                PUSH    DS
                MOV     AH,3FH
                MOV     CX,16*1024
                XOR     DX,DX
                MOV     DS,DI
                INT     21H
                POP     DS
.L1:            MOV     AH,3EH
                INT     21H
.L5:            ADD     SI,11
                ADD     DI,400H
                CMP     SI,11*8
                JNZ     .L2

                MOV     AH,47H          ;SAVE STARTUP PATH & DRIVE
                MOV     SI,SAVE_FPATH+3
                XOR     DL,DL
                INT     21H

                MOV     AH,19H
                INT     21H

                ADD     AL,41H
                MOV     [SAVE_FPATH],AL
                MOV     [FPATH],AL      ;+ SET CURRENT DRIVE LETTER
                MOV     AX,':\'
                MOV     WORD [SAVE_FPATH+1],AX
                MOV     WORD [FPATH+1],AX

                XOR     AX,AX
                MOV     ES,AX
                MOV     AL,[ES:417H]
                MOV     [KBD_FLAGS],AL
                AND     [KBD_FLAGS],30H
                AND     BYTE [ES:417H],0CFH
                AND     AL,40H
                JZ      .L4

                AND     [KMATRIX+1],7FH
.L4:            MOV     [LED],AL
                CALL    SET_LED

                MOV     AX,0A000H       ;? Init ES For TED
                MOV     ES,AX

                MOV     [TOTALTICKS],0

                CALL    SEG_CODE2:GET_DRVS      ;INIT MENUS
                CALL    GET_FPATH
                CALL    INIT_WIN1
                JMP     FILL_IBM_FLIST

PARAM:          CMP     [PARAMF],0
                JNE     .EXIT

                CMP     [RETRACE_COUNT],5    ;1/10sec
                JB      .EXIT

                PUSHA
                PUSH    ES
                INC     [PARAMF]
                MOV     DI,IOBUF+1
.L1:            CMP     [IOBUF],0
                JE      .EXIT1

                MOV     BX,[DI+2]
                MOV     EAX,[BX-4]
                CMP     EAX,'PRG'
                JZ      .PRG

                CMP     AX,'P0'
                JNZ     .L4

                SHR     EAX,16
                CMP     AL,'9'
                JA      .L4

                CMP     AL,'0'
                JAE     .P0N

.L4:            CMP     EAX,'C2F'
                JZ      .C2F

                CMP     EAX,'D64'
                JZ      .D64

                MOV     [DEV1FMT],'T'
                CMP     EAX,'TAP'
                JZ      .TAPE

                MOV     [DEV1FMT],'C'
                CMP     EAX,'CTF'
                JZ      .TAPE

                SHR     EAX,16
                CMP     AX,'\'
                JZ      .DIR

                JMP     .L3

.PRG:           MOV     AX,3D00H
                MOV     DX,[DI]
                INT     21H
                JC      .L3

                MOV     BX,AX
                MOV     AH,3FH
                MOV     DX,IOBUF+980
                MOV     CX,2
                INT     21H

                MOV     DX,WORD [IOBUF+980]
.L5:            MOV     AH,3FH
                MOV     CX,0F500H
                PUSH    DS
                PUSH    FS
                POP     DS
                INT     21H
                ADD     AX,DX
                CMP     AX,1009H
                JB      .L2

                CMP     AX,0FD00H
                JAE     .L2

                MOV     [2DH],AX
                MOV     [2FH],AX
                MOV     [31H],AX
                MOV     [9DH],AX
.L2:            POP     DS
.L6:            MOV     AH,3EH
                INT     21H

.L3:            ADD     DI,2
                DEC     [IOBUF]
                JMP     .L1

.P0N:           MOV     AX,3D00H
                MOV     DX,[DI]
                INT     21H
                JC      .L3

                MOV     BX,AX
                MOV     AH,3FH
                MOV     DX,IOBUF+980
                MOV     CX,28
                INT     21H

                MOV     DX,WORD [IOBUF+980+26]
                JMP     .L5

.C2F:           MOV     AX,3D00H
                MOV     DX,[DI]
                INT     21H
                JC      .L3

                MOV     BX,AX
                PUSH    AX
                CALL    ENT_C2F_BODY
                POP     BX
                JMP     .L6

.TAPE:          CALL    PREP1PARAM
                CALL    ADDTAPE
                JMP     .L3

.D64:           MOV     BP,[DI]
                CMP     WORD [DS:BP],'/9'
                JNZ     .LD1

                ADD     WORD [DI],2
                CALL    PREP9PARAM
                CALL    ADDDISK9
                JMP     .L3

.LD1:           CMP     WORD [DS:BP],'/8'
                JNZ     .LD2

                ADD     WORD [DI],2
.LD2:           CALL    PREP8PARAM
                CALL    ADDDISK8
                JMP     .L3

.DIR:           CALL    PREPDPARAM
                MOV     DL,[DEVDPATH]
                SUB     DL,'A'
                MOV     AH,0EH
                INT     21H

                MOV     BX,[DEVDFNP]
                MOV     BYTE [BX-1],0
                PUSH    DI
                CALL    SET_FPATH
                CALL    FILL_IBM_FLIST
                POP     DI
                JMP     .L3

.EXIT1:         POP     ES
                MOVZX   BX,[FPATH_LEN]
                MOV     [FPATH-1+BX],0
                CALL    SET_FPATH
                POPA
.EXIT:          RETN

                PARAMC  1
                PARAMC  8
                PARAMC  9
                PARAMC  D
                ADDDISC 8
                ADDDISC 9

ADDTAPE:        MOV     DX,DEV1PATH
                MOV     AX,3D02H        ;OPEN FILE, R/W
                CMP     [DEV1FMT],'C'
                JNZ     .TAP

                MOV     [DEV1WP],0
                INT     21H
                JNC     .L2

                INC     [DEV1WP]
                MOV     AX,3D00H        ;TRY R/O
                INT     21H
                JC      .FAIL

.L2:            MOV     [DEV1FH],AX
                MOV     BX,AX
                MOV     AH,3FH
                MOV     CX,6
                MOV     DX,DS_FVER
                INT     21H

.L4:            MOV     AX,4202H
                XOR     CX,CX
                XOR     DX,DX
                INT     21H

                MOV     WORD [DEV1SZ],AX
                MOV     WORD [DEV1SZ+2],DX
                RETN

.TAP:           MOV     [DEV1WP],1      ;ALWAYS R/O!
                INT     21H
                JNC     .L3

                MOV     AX,3D00H        ;TRY R/O
                INT     21H
                JC      .FAIL

.L3:            MOV     [DEV1FH],AX
                MOV     BX,AX
                MOV     AH,3FH
                MOV     CX,20
                MOV     DX,DS_TAP
                INT     21H

                XOR     EAX,EAX
                MOV     [DS_TAPSUM],EAX
                MOV     [DS_TAPEB],AX
                MOV     [DS_BUF_PTR],AX
                MOV     [DS_TAPPM],10H
                MOV     [DS_TAPF],AL
                CMP     WORD [DS_TAP+13],2      ;C16 & PAL
                JZ      .L4

                MOV     AH,3EH
                INT     21H

.FAIL:          MOV     BX,[DEV1FNP]
                MOV     BYTE [BX],0
                RETN


