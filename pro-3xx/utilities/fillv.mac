;for macro-11 assembler, DEC Pro, RT-11
;it fills the 1024x256 screen ITER times via: 1) video registers; 2) direct VRAM acccess
;it also shows timings 

DVIDEO = 1   ;0 means video registers, 0 is faster for the 380
ITER = 40.

.if ne DVIDEO
VBASE = 15360.  ;0x3c00*0x100 = 0x3c0000 = 3.75 MB
;VBASE = 12288.  ;0x3000*0x100 = 0x300000 = 3 MB

MPSW = 65534.   ;$fffe
SR1 = 65402.    ;$ff7a
SR3 = 62798.    ;$f54e
KPAR1 = 62690.  ;$f4e2
UPAR1 = 65442.  ;$ffa2
.endc

      .MCall .exit, .trpset, .print, .ttyout, .ttyin, .settop, .gval, .gtim
      CONFIG = ^O300
      TTSPC$ =: ^O10000
      $JSW =: ^O44

START:   bis #TTSPC$,@#$JSW
.if ne DVIDEO
         .settop #-2
         cmp r0,#16384.-2   ;$4000-2
         bcc 8$

         .print #nomem
         .exit
8$:
.endc
         mov #63488.,R1    ;$f800
         mov #7,R3
2$:      .trpset #area,#3$
         mov (r1),r2
         cmpb #2,r2  ;ID for the Pro 325/350
         beq 1$

         cmpb #16.,r2  ;ID for the Pro 380+EBO
         beq 1$

         cmpb #40.,r2  ;ID for the Pro 380
         beq 1$

         cmp -(SP),-(SP)
3$:      cmp (SP)+,(SP)+
         add #128.,R1    ;$80, upto $fb00
         sob R3,2$

         .print #emsg
         .exit
1$:      .trpset #area,#0
         mov r1,@#vbas
         call @#sreg
.if ne DVIDEO
         mov #^B0000000000100000,6(r1)   ;1024 dots, no-op, cpu access
         mov #VBASE/128.,22.(r1)    ;VRAM address
         tst @#MPSW
         bmi 14$

         mov #KPAR1,@#apar1
         mov #16.,@#SR3
         mov #1,@#SR1
14$:     call @#smmu
.endc
         .gtim #area,#time
         mov #ITER,r5
         mov #21845.,r3    ;$5555
.if ne DVIDEO
11$:     mov @#apar1,r2
         mov #VBASE*4,@#spar1c
         mov #4,r4
9$:      call disintr
         mov #8192.,r0
         mov #4096.,r1
7$:      mov r3,(r0)+
         sob r1,7$
         add #128.,@r2
         call enintr
         sob r4,9$
.iff
         mov @#vbas,r1
11$:     clr r2   ;Y
         mov r3,20.(r1)
12$:     clr 14.(r1)
         mov r2,16.(r1)
         mov #1024.,18.(r1)
         tst 4(r1)   ;transfer done?
         bpl .-4

         incb r2
         bne 12$
.endc         
         sob r5,11$

         call @#rreg
.if ne DVIDEO
         call @#rmmu
         tst @#MPSW
         bmi 16$

         clr @#SR1
16$:
.endc
         .gtim #area,#time2
         .ttyin
		 sub @#time+2,@#time2+2
		 sbc @#time2
		 sub @#time,@#time2
		 mov @#time2,r2
		 mov @#time2+2,r3
		 asl r3
		 rol r2
         .gval #area,#CONFIG
         mov r0,r4
         mov r3,r1
         mov r2,r0
         bit #32.,r4    ;50 or 60 Hz?
         bne 10$

         asl r1     ;*5
         rol r0
         add @#time2+2,r1
         adc r0
         add @#time2,r0
         asl r1    ;quotient is limited to 15 bits!
         rol r0
         mov r0,r3
         clr r2
         div #3,r2
         mov r3,r0
         asr r0
         ror r1
         div #3,r0
         asr r1
         add r0,r1
         clr r0
         asr r2
         ror r0
         add r0,r1
         adc r2
         mov r2,r0
10$:     call @#printsec
         .exit

.if ne DVIDEO
smmu:  mov @#apar1,r1
       mov (r1),@#savem
       return

rmmu:  mov @#apar1,r1
       mov @#savem,(r1)
       return

disintr:   
    mov @#MPSW,@#sip
    bis #^B0000000011100000,@#MPSW
    mov @r2,@#spar1o
    mov @#spar1c,@r2
    return

enintr:
    mov @r2,@#spar1c
    mov @#spar1o,@r2
    mov @#sip,r0
    bic #^B1111111100011111,r0
    mov @#MPSW,r1
    bic #^B0000000011100000,r1
    bis r0,r1
    mov r1,@#MPSW
    return

savem:   .blkw 1
apar1:   .word UPAR1
sip:     .blkw 1
spar1o:   .blkw 1
spar1c:   .blkw 1
.endc

rreg:  mov @#vbas,r1
       mov #save4,r2
       mov (r2)+,4(r1)
       mov (r2)+,6(r1)
       mov (r2)+,8.(r1)
       mov (r2)+,14.(r1)
       mov (r2),16.(r1)
       return

sreg:  mov @#vbas,r1
       mov #save4,r2
       mov 4(r1),(r2)+
       mov 6(r1),(r2)+
       mov 8.(r1),(r2)+
       mov 14.(r1),(r2)+
       mov 16.(r1),(r2)
     mov #^B0000010000000001,4(r1)   ;256 lines, mapped mode
     mov #^B0000000000000010,6(r1)   ;1024 dots, move to screen, no cpu access
     mov #^B0000000000000000,8.(r1)  ;disable planes 3 (red) and 2 (green)
       return

save4:   .blkw 5

printsec:  ;prints R0:R1/100
        mov r1,r2
        mov r0,r1
        clr r4
        mov #1,r5
        mov #34464.,r3  ;100000-65536
        call @#pr0
        clr r5
        mov #10000.,r3
        call @#pr0
        mov #1000.,r3
        call @#pr0
        inc r4
        mov #100.,r3
        call @#pr0
        movb #'.,r0
        .ttyout
        mov #10.,r3
        call @#pr0
pr1:    mov r2,r0
pr02:   add #48.,r0
        .ttyout
        inc r4
pr05:     return

pr07:     tst r4
        bne pr02

        tst r0
        beq pr05

        inc r4
        br pr02

pr0:     mov #65535.,r0
4$:	    inc r0
        cmp r1,r5
        bcs pr07
        bne 8$

	cmp r2,r3
	bcs pr07

8$:     sub r3,r2
        sbc r1
        sub r5,r1
	br 4$

time:    .word 0,0
time2:   .word 0,0
vbas:    .word 0
area:    .word 0,0
addr:    .word 0

.if ne DVIDEO
nomem:   .asciz "not enough memory"
.endc
emsg:    .asciz "cannot find the graphic system"
eol = . - 1
.End	START
